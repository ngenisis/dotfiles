#+TITLE: Emacs configuration
#+Author: Ian Ford

* Package management
** [[https://melpa.org/][MELPA]]

 #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives
				'("melpa" . "https://melpa.org/packages/")
				t)
   (package-initialize)
   (setq package-selected-packages
		 '(color-theme-sanityinc-tomorrow
		   dired-collapse
		   dired-ranger
		   evil
		   evil-collection
		   evil-magit
		   evil-org
		   general
		   helpful
		   ido-completing-read+
		   ido-vertical-mode
		   magit
		   mu4e-alert
		   org-bullets
		   rainbow-delimiters
		   smartparens
		   sudo-edit
		   use-package
		   vterm))
 #+END_SRC

** [[https://github.com/jwiegley/use-package][use-package]]

 #+BEGIN_SRC emacs-lisp
   (eval-when-compile
	 (require 'use-package))
 #+END_SRC

** [[https://github.com/noctuid/general.el][general]]
   
   #+BEGIN_SRC emacs-lisp
	 (use-package general
	   :ensure t)
   #+END_SRC

* Basic settings
** Disable startup screen

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
 #+END_SRC

** Disable backups and auto-save files

 #+BEGIN_SRC emacs-lisp
   (setq backup-inhibited t)
   (setq auto-save-default nil)
 #+END_SRC

** Default frame settings

 #+BEGIN_SRC emacs-lisp
   (setq default-frame-alist '((menu-bar-lines . 0)
							   (tool-bar-lines . 0)
							   (vertical-scroll-bars . nil)
							   (horizontal-scroll-bars . nil)
							   (alpha . (85 . 50))
							   (font . "Hack 8")))
 #+END_SRC

** Immediately echo keystrokes

 #+BEGIN_SRC emacs-lisp
   (setq echo-keystrokes .1)
 #+END_SRC

** Text

 #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 4
				 word-wrap t
				 show-trailing-whitespace t)
 #+END_SRC

** prog-mode

   #+BEGIN_SRC emacs-lisp
	 (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers t
												show-trailing-whitespace t)))
   #+END_SRC

** Automatically follow symlinks to version controlled files

   #+BEGIN_SRC emacs-lisp
	 (setq vc-follow-symlinks t)
   #+END_SRC
   
* Packages
** [[https://github.com/purcell/color-theme-sanityinc-tomorrow][color-theme-sanityinc-tomorrow]]

 #+BEGIN_SRC emacs-lisp
   (use-package color-theme-sanityinc-tomorrow
	 :ensure t
	 :config
	 (load-theme 'sanityinc-tomorrow-bright t))
 #+END_SRC

** dired

 #+BEGIN_SRC emacs-lisp
   (use-package dired
	 :general
	 ('normal dired-mode-map
			  "TAB" #'dired-hide-subdir)
	 :config
	 (setq dired-listing-switches "-al --group-directories-first"
		 dired-isearch-filenames 'dwim
		 delete-by-moving-to-trash 't
		 dired-recursive-copies 't
		 dired-dwim-target 't)
	 (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1))))
 #+END_SRC

** [[https://github.com/Fuco1/dired-hacks][dired-hacks]]
   
   #+BEGIN_SRC emacs-lisp
	 (use-package dired-collapse
	   :ensure t
	   :config
	   (add-hook 'dired-mode-hook #'dired-collapse-mode))
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
	 (use-package dired-ranger
	   :ensure t
	   :general
	   ('normal dired-mode-map
				"y" #'dired-ranger-copy
				"p" #'dired-ranger-paste
				"M-p" #'dired-ranger-move))
   #+END_SRC

** eshell

   #+BEGIN_SRC emacs-lisp
	 (use-package eshell
	   :general
	   ("C-x e" #'eshell))
   #+END_SRC

** [[https://github.com/emacs-evil/evil][evil]]

 #+BEGIN_SRC emacs-lisp
   (use-package evil
	 :ensure t
	 :init
	 (setq evil-want-integration t
		   evil-want-keybinding nil
		   evil-search-module 'evil-search)
	 :config
	 (evil-mode 1)
	 (add-hook 'with-editor-mode-hook #'evil-insert-state))
 #+END_SRC

** [[https://github.com/emacs-evil/evil-collection][evil-collection]]

   #+BEGIN_SRC emacs-lisp
	 (use-package evil-collection
	   :after evil
	   :ensure t
	   :config
	   (evil-collection-init))
   #+END_SRC

** [[https://github.com/emacs-evil/evil-magit][evil-magit]]
   
   #+BEGIN_SRC emacs-lisp
	 (use-package evil-magit
	   :ensure t)
   #+END_SRC

** [[https://github.com/Somelauw/evil-org-mode][evil-org]]

   #+BEGIN_SRC emacs-lisp
	 (use-package evil-org
	   :after org
	   :ensure t
	   :init
	   (add-hook 'org-mode-hook 'evil-org-mode)
	   :config
	   (add-hook 'evil-org-mode-hook
				 (lambda ()
				   (evil-org-set-key-theme)))
	   (setq evil-org-retain-visual-state-on-shift t))

	 (use-package evil-org-agenda
	   :after evil-org
	   :config
	   (evil-org-agenda-set-keys))
   #+END_SRC

** [[https://github.com/Wilfred/helpful][helpful]]

 #+BEGIN_SRC emacs-lisp
   (use-package helpful
	 :ensure t
	 :general
	 ("C-h f" #'helpful-callable)
	 ("C-h v" #'helpful-variable)
	 ("C-h k" #'helpful-key))
 #+END_SRC
 
** ido
   
   #+BEGIN_SRC emacs-lisp
	 (use-package ido
	   :config
	   (ido-mode t))
   #+END_SRC

** [[https://github.com/DarwinAwardWinner/ido-completing-read-plus][ido-completing-read+]]
   
   #+BEGIN_SRC emacs-lisp
	 (use-package ido-completing-read+
	   :ensure t
	   :config
	   (ido-ubiquitous-mode 1))
   #+END_SRC

** [[https://github.com/creichert/ido-vertical-mode.el][ido-vertical-mode]]
   
   #+BEGIN_SRC emacs-lisp
	 (use-package ido-vertical-mode
	   :ensure t
	   :after ido
	   :config
	   (ido-vertical-mode 1))
   #+END_SRC

** [[https://magit.vc/manual/][magit]]

 #+BEGIN_SRC emacs-lisp
   (use-package magit
	 :ensure t
	 :general
	 ("C-x g" #'magit-status))
 #+END_SRC

** [[https://github.com/djcb/mu][mu4e]]

   #+BEGIN_SRC emacs-lisp
	 (use-package mu4e
	   :general
	   ("C-x m" #'mu4e) ; shadows default compose-mail key binding
	   :config
	   (setq mail-user-agent 'mu4e-user-agent
			 mu4e-get-mail-command "mbsync -Va"
			 mu4e-change-filenames-when-moving t
			 mu4e-update-interval 30
			 mu4e-hide-index-messages t
			 mu4e-compose-dont-reply-to-self t
			 mu4e-use-fancy-chars t
			 mu4e-headers-date-format "%e %b"
			 mu4e-split-view nil
			 mu4e-view-show-addresses t
			 ;; Always show the text part
			 mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum
			 mu4e-headers-fields '((:date . 7)
							  (:from . 22)
							  (:thread-subject)))
	   (let ((mail-file "~/.emacs.d/mail.el"))
		 (if (file-readable-p mail-file)
			 (load-file mail-file))))
   #+END_SRC

   Example mail.el:

   #+BEGIN_SRC emacs-lisp :tangle no
	 ;; Identity
	 (setq user-full-name "Full Name"
		   user-mail-address "user@example.org")

	 ;; Folder settings
	 (setq mu4e-maildir "~/Maildir"
		   mu4e-drafts-folder "/drafts"
		   mu4e-sent-folder "/sent"
		   mu4e-trash-folder "/trash"
		   mu4e-refile-folder "/archive")

	 ;; Send mail
	 (setq message-send-mail-function 'smtpmail-send-it
		   smtpmail-smtp-server "smtp.example.org"
		   smtpmail-smtp-service 465
		   smtpmail-stream-type 'ssl)
   #+END_SRC

** [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]]

   #+BEGIN_SRC emacs-lisp
	 (use-package mu4e-alert
	   :ensure t
	   :config
	   (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
   #+END_SRC

*** TODO Enable [[https://github.com/iqbalansari/mu4e-alert#desktop-notifications-for-unread-emails][desktop notifications]]

** [[https://orgmode.org/][org]]
   
   #+BEGIN_SRC emacs-lisp
	 (use-package org
	   :general
	   ("C-c l" #'org-store-link)
	   ("C-c a" #'org-agenda)
	   ("C-c c" #'org-capture)
	   ("C-c b" #'org-switchb)
	   :config
	   (add-hook 'org-mode-hook 'auto-fill-mode)
	   (setq org-special-ctrl-a/e t ; jump to beginning/end of headerlines and items rather than lines
			 org-catch-invisible-edits 'smart
			 org-goto-interface 'outline-path-completion))
   #+END_SRC

** [[https://github.com/sabof/org-bullets][org-bullets]]

   #+BEGIN_SRC emacs-lisp
	 (use-package org-bullets
	   :after org
	   :ensure t
	   :init
	   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

   #+BEGIN_SRC emacs-lisp
	 (use-package rainbow-delimiters
	   :ensure t
	   :init
	   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
   
** [[https://github.com/Fuco1/smartparens][smartparens]]

   #+BEGIN_SRC emacs-lisp
	 (use-package smartparens
	   :ensure t
	   :init
	   (add-hook 'prog-mode-hook #'smartparens-mode)
	   :config
	   (require 'smartparens-config))
   #+END_SRC
   
** [[https://melpa.org/#/sudo-edit][sudo-edit]]

   Activate with `M-x sudo-edit`

 #+BEGIN_SRC emacs-lisp
   (use-package sudo-edit
	 :ensure t)
 #+END_SRC

** [[https://github.com/akermu/emacs-libvterm][vterm]]

   #+BEGIN_SRC emacs-lisp
	 (use-package vterm
	   :ensure t
	   :general
	   ("C-x t" #'vterm))
   #+END_SRC

*** TODO [[https://github.com/akermu/emacs-libvterm#shell-side-configuration][Shell-side configuration]]

** [[https://github.com/kawabata/wolfram-mode][wolfram-mode]]

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/wolfram-mode/")
   (autoload 'wolfram-mode "wolfram-mode" nil t)
   (autoload 'run-wolfram "wolfram-mode" nil t)
   (setq wolfram-program "/opt/Mathematica/12.1/Executables/MathKernel")
   (add-to-list 'auto-mode-alist '("\.m$" . wolfram-mode))
   (add-to-list 'auto-mode-alist '("\.wl$" . wolfram-mode))
   (setq wolfram-path "~/.Mathematica/Applications")
 #+END_SRC

* TODO
- Open mail Org links in frame containing current mu4e-headers buffer
- Keybinds for common locations in dired (bookmarks, Bookmarks+?)
- Key bind to toggle show dotfiles in Dired (dired-filter from dired-hacks)
- dired-subtree?
- Disable highlighting after searching with /
- magit-status (C-x g) should default to pwd if in vterm
- Equivalent of git/diff-highlight for Magit diff
- Report bug in [[info:org#Motion][info:org#Motion]], should be
  org-forward-heading-same-level, not org-forward-same-level
- Safe shutdown keybinding: delete all buffers containing files and
  running process, prompting whether to save etc, then killing the
  emacs server. The window manager's emacs keybinding should restart
  the emacs server if it isn't already active.
- WAIT keyword for org
- Don't move cursor when promoting or demoting in org mode
- Show org link at point in modeline
- mu4e-mark-execute-all should mu4e~headers-jump-to-maildir
  afterwards? Background: I'll have an archived thread, then I'll
  receive more mail on that thread and they'll show up in my
  inbox. When I archive the new messages, I want the entire thread to
  no longer show up in my current headers view. Currently I will get
  broken portions of the thread still showing up even though those
  messages aren't in my inbox. My workaround currently is to rejump
  back to INBOX manually which is annoying.
