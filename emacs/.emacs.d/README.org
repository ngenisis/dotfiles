#+TITLE: Emacs configuration
#+Author: Ian Ford

* Package management
** [[https://melpa.org/][MELPA]]

 #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives
				'("melpa" . "https://melpa.org/packages/")
				t)
   (package-initialize)
   (setq package-selected-packages
		 '(alect-themes
		   color-theme-sanityinc-tomorrow
		   dired-collapse
		   dired-filter
		   dired-ranger
		   dired-subtree
		   evil
		   evil-collection
		   evil-magit
		   evil-org
		   general
		   helpful
		   ido-completing-read+
		   ido-vertical-mode
		   ledger-mode
		   lsp-mode
		   magit
		   mu4e-alert
		   nix-mode
		   org-bullets
		   rainbow-delimiters
		   restart-emacs
		   smartparens
		   sudo-edit
		   use-package
		   vterm
		   vterm-toggle
		   wolfram-mode))
 #+END_SRC

** [[https://github.com/jwiegley/use-package][use-package]]

 #+BEGIN_SRC emacs-lisp
   (eval-when-compile
	 (require 'use-package))
 #+END_SRC

** [[https://github.com/noctuid/general.el][general]]

   #+BEGIN_SRC emacs-lisp
	 (use-package general
	   :ensure t)
   #+END_SRC

* Basic settings
** Disable startup screen

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
 #+END_SRC

** Disable backups and auto-save files

 #+BEGIN_SRC emacs-lisp
   (setq backup-inhibited t)
   (setq auto-save-default nil)
 #+END_SRC

** Default frame settings

 #+BEGIN_SRC emacs-lisp
   (setq default-frame-alist '((menu-bar-lines . 0)
							   (tool-bar-lines . 0)
							   (vertical-scroll-bars . nil)
							   (horizontal-scroll-bars . nil)
							   (alpha . (85 . 50))
							   (font . "Hack 8")))
 #+END_SRC

** Immediately echo keystrokes

 #+BEGIN_SRC emacs-lisp
   (setq echo-keystrokes .1)
 #+END_SRC

** Trailing whitespace

   Show trailing whitespace by default:

   #+BEGIN_SRC emacs-lisp
	 (setq-default show-trailing-whitespace t)
   #+END_SRC

   Disable this in certain modes:

   #+BEGIN_SRC emacs-lisp
	 (dolist (hook '(special-mode-hook
					 term-mode-hook
					 vterm-mode-hook
					 minibuffer-setup-hook
					 ; Info must be capitalized (:
					 Info-mode-hook
					 calendar-mode-hook))
	   (add-hook hook (lambda () (setq-local show-trailing-whitespace nil))))
   #+END_SRC

** Text

 #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 4
				 word-wrap t)
 #+END_SRC

** prog-mode

   #+BEGIN_SRC emacs-lisp
	 (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers t)))
   #+END_SRC

** Automatically follow symlinks to version controlled files

   #+BEGIN_SRC emacs-lisp
	 (setq vc-follow-symlinks t)
   #+END_SRC

** Display column numbers in mode line

   #+BEGIN_SRC emacs-lisp
	 (column-number-mode t)
   #+END_SRC

* Packages
** [[https://github.com/alezost/alect-themes][alect-themes]]

   #+BEGIN_SRC emacs-lisp
	 (use-package alect-themes
	   :ensure t
	   :config
	   (load-theme 'alect-black t))
   #+END_SRC

** calc

   #+BEGIN_SRC emacs-lisp
	 (use-package calc
	   :general
	   (general-override-mode-map "M-c" #'calc-dispatch)) ; shadows capitalize-word
   #+END_SRC

** [[https://github.com/purcell/color-theme-sanityinc-tomorrow][color-theme-sanityinc-tomorrow]]

 #+BEGIN_SRC emacs-lisp :tangle no
   (use-package color-theme-sanityinc-tomorrow
	 :ensure t
	 :config
	 (load-theme 'sanityinc-tomorrow-bright t))
 #+END_SRC

** dired

 #+BEGIN_SRC emacs-lisp
   (use-package dired
	 :general
	 ('normal dired-mode-map
			  "TAB" #'dired-hide-subdir)
	 :config
	 (setq dired-listing-switches "-al --group-directories-first"
		   dired-isearch-filenames 'dwim
		   delete-by-moving-to-trash 't
		   dired-recursive-copies 't
		   dired-dwim-target 't)
	 (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1))))
 #+END_SRC

*** TODO Keybinds for common locations (bookmarks, Bookmarks+?)

** [[https://github.com/Fuco1/dired-hacks][dired-hacks]]

   #+BEGIN_SRC emacs-lisp :tangle no
	 (use-package dired-collapse
	   :ensure t
	   :config
	   (add-hook 'dired-mode-hook #'dired-collapse-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
	 (use-package dired-filter
	   :ensure t
	   :config
	   (add-hook 'dired-mode-hook #'dired-filter-by-dot-files))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
	 (use-package dired-ranger
	   :ensure t
	   :general
	   ('normal dired-mode-map
				"y" #'dired-ranger-copy
				"p" #'dired-ranger-paste
				"M-p" #'dired-ranger-move))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
	 (use-package dired-subtree
	   :ensure t)
   #+END_SRC

*** TODO Report poor interaction between dired-collapse and dired-subtree
	Say I have foo/bar/yolo.txt and foo/bar/swag.txt. dired-collapse
	will collapse to foo/bar. If I TAB to toggle subtree, then foo/bar
	disappears, and a subdirectory foo/bar/foo/bar is displayed. TAB
	on it, I get "Read directory: no such file or directory..."
** [[https://github.com/emacs-evil/evil][evil]]

 #+BEGIN_SRC emacs-lisp
   (use-package evil
	 :ensure t
	 :general
	 ('normal "gc" #'comment-or-uncomment-region)
	 ; These keys play nicer with god-mode
	 (general-override-mode-map :prefix "C-w"
								"C-h" #'evil-window-left
								"C-j" #'evil-window-down
								"C-k" #'evil-window-up
								"C-l" #'evil-window-right)
	 :init
	 (setq evil-want-integration t
		   evil-want-keybinding nil)
	 :config
	 (evil-mode 1)
	 (add-hook 'with-editor-mode-hook #'evil-insert-state))
 #+END_SRC

*** TODO Begin in normal state for commit amend

** [[https://github.com/emacs-evil/evil-collection][evil-collection]]

   #+BEGIN_SRC emacs-lisp
	 (use-package evil-collection
	   :after evil
	   :ensure t
	   :config
	   (evil-collection-init))
   #+END_SRC

** [[https://github.com/emacs-evil/evil-magit][evil-magit]]

   #+BEGIN_SRC emacs-lisp
	 (use-package evil-magit
	   :ensure t)
   #+END_SRC

** [[https://github.com/Somelauw/evil-org-mode][evil-org]]

   #+BEGIN_SRC emacs-lisp
	 (use-package evil-org
	   :after org
	   :ensure t
	   :init
	   (add-hook 'org-mode-hook 'evil-org-mode)
	   :config
	   (add-hook 'evil-org-mode-hook
				 (lambda ()
				   (evil-org-set-key-theme)))
	   (setq evil-org-retain-visual-state-on-shift t))

	 (use-package evil-org-agenda
	   :after evil-org
	   :config
	   (evil-org-agenda-set-keys))
   #+END_SRC

** [[https://github.com/emacsorphanage/god-mode][god-mode]]

   #+BEGIN_SRC emacs-lisp
	 (use-package god-mode
	   :ensure t
	   :general
	   ; Bind to SPC in normal state
	   ('normal "SPC" #'god-execute-with-current-bindings)
	   ; These modes bind SPC in normal state (possibly from evil-collection),
	   ; which will take precedence over the global binding
	   ('normal (special-mode-map   ; shadows scroll-up-command
				 mu4e-view-mode-map ; shadows mu4e-view-scroll-up-or-next
				 dired-mode-map)    ; shadows dired-next-line
				"SPC" #'god-execute-with-current-bindings)
	   ; Bind to M-SPC in all states (Note: this may be shadowed by Evil keys)
	   (general-override-mode-map "M-SPC" #'god-execute-with-current-bindings))
   #+END_SRC

** [[https://github.com/Wilfred/helpful][helpful]]

 #+BEGIN_SRC emacs-lisp
   (use-package helpful
	 :ensure t
	 :general
	 (general-override-mode-map :prefix "C-h"
								"C-f" #'helpful-callable ; shadows view-emacs-FAQ
								"C-v" #'helpful-variable
								"C-k" #'helpful-key))
 #+END_SRC

** ido

   #+BEGIN_SRC emacs-lisp
	 (use-package ido
	   :general
	   (general-override-mode-map :prefix "C-x"
								  "C-f" #'ido-find-file      ; shadows find-file
								  "d"   #'ido-dired          ; shadows dired
								  "C-d" #'ido-dired          ; shadows ido-list-directory
								  "C-b" #'ido-switch-buffer) ; shadows list-buffers
	   :config
	   (ido-mode t)
	   (ido-everywhere t))
   #+END_SRC

** [[https://github.com/DarwinAwardWinner/ido-completing-read-plus][ido-completing-read+]]

   #+BEGIN_SRC emacs-lisp
	 (use-package ido-completing-read+
	   :ensure t
	   :config
	   (ido-ubiquitous-mode 1))
   #+END_SRC

** [[https://github.com/creichert/ido-vertical-mode.el][ido-vertical-mode]]

   #+BEGIN_SRC emacs-lisp
	 (use-package ido-vertical-mode
	   :ensure t
	   :after ido
	   :config
	   (ido-vertical-mode 1))
   #+END_SRC

** [[https://github.com/ledger/ledger-mode][ledger-mode]]

   #+BEGIN_SRC emacs-lisp
	 (use-package ledger-mode
	   :ensure t
	   :general
	   ('normal ledger-reconcile-mode-map
				"TAB" #'ledger-reconcile-toggle)
	   :config
	   (setq ledger-post-amount-alignment-column 80)
	   ; Must set tab-width to default for indentation to work correctly
	   (add-hook 'ledger-mode-hook #'(lambda () (setq-local tab-width 8))))
   #+END_SRC

*** TODO Report the tab-width issue?
** [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]

   #+BEGIN_SRC emacs-lisp
	 (use-package lsp-mode
	   :ensure t
	   :hook ((wolfram-mode . lsp))
	   :commands lsp
	   :init
	   (setq lsp-keymap-prefix "C-l") ; shadows recenter-top-bottom
	   :config
	   (add-to-list 'lsp-language-id-configuration '(wolfram-mode . "wolfram"))
	   (lsp-register-client
		(make-lsp-client :new-connection
						 (lsp-stdio-connection
						  '("WolframKernel12.1.1"
							"-noinit" "-noprompt" "-nopaclet" "-noicon" "-run"
							"Needs[\"LSPServer`\"];LSPServer`StartServer[\"~/logs\"]"))
						 :major-modes '(wolfram-mode)
						 :server-id 'wolfram-lsp-server)))
   #+END_SRC

** [[https://magit.vc/manual/][magit]]

 #+BEGIN_SRC emacs-lisp
   (use-package magit
	 :ensure t
	 :general
	 (general-override-mode-map "M-g" #'magit-status ; shadows move-to-column, goto-char, goto-line, next-error, previous-error
								"M-d" #'magit-dispatch) ; shadows kill-word
	 :config
	 (setq magit-diff-refine-hunk 'all
		   magit-diff-paint-whitespace 't
		   magit-diff-paint-whitespace-lines 'both
		   magit-diff-highlight-trailing 't))
 #+END_SRC

** [[https://github.com/djcb/mu][mu4e]]

   #+BEGIN_SRC emacs-lisp
	 (use-package mu4e
	   :general
	   (general-override-mode-map "M-m" #'mu4e) ; shadows back-to-indentation
	   :config
	   (setq mail-user-agent 'mu4e-user-agent
			 mu4e-get-mail-command "mbsync -Va"
			 mu4e-change-filenames-when-moving t
			 mu4e-update-interval 30
			 mu4e-hide-index-messages t
			 mu4e-compose-dont-reply-to-self t
			 mu4e-use-fancy-chars t
			 mu4e-headers-date-format "%e %b"
			 mu4e-split-view nil
			 mu4e-view-show-addresses t
			 ;; Always show the text part
			 mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum
			 mu4e-headers-fields '((:date . 7)
							  (:from . 22)
							  (:thread-subject)))
	   (let ((mail-file "~/.emacs.d/mail.el"))
		 (if (file-readable-p mail-file)
			 (load-file mail-file))))
   #+END_SRC

   Example mail.el:

   #+BEGIN_SRC emacs-lisp :tangle no
	 ;; Identity
	 (setq user-full-name "Full Name"
		   user-mail-address "user@example.org")

	 ;; Folder settings
	 (setq mu4e-maildir "~/Maildir"
		   mu4e-drafts-folder "/drafts"
		   mu4e-sent-folder "/sent"
		   mu4e-trash-folder "/trash"
		   mu4e-refile-folder "/archive")

	 ;; Send mail
	 (setq message-send-mail-function 'smtpmail-send-it
		   smtpmail-smtp-server "smtp.example.org"
		   smtpmail-smtp-service 465
		   smtpmail-stream-type 'ssl)
   #+END_SRC

*** TODO Open mail Org links in frame containing current mu4e-headers buffer
*** TODO mu4e-mark-execute-all should mu4e~headers-jump-to-maildir afterwards?
	Background: I'll have an archived thread, then I'll
	receive more mail on that thread and they'll show up in my
	inbox. When I archive the new messages, I want the entire thread to
	no longer show up in my current headers view. Currently I will get
	broken portions of the thread still showing up even though those
	messages aren't in my inbox. My workaround currently is to rejump
	back to INBOX manually which is annoying.
*** TODO Keybinds that act on whole threads
*** TODO Report bug where a message to myself with no subject will thread with previous message in headers view
** [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]]

   #+BEGIN_SRC emacs-lisp
	 (use-package mu4e-alert
	   :ensure t
	   :config
	   (mu4e-alert-set-default-style 'notifications)
	   (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
	   (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display))
   #+END_SRC

*** TODO [[https://github.com/iqbalansari/mu4e-alert#customizing-the-desktop-notifications][Customize the desktop notifications]]
** [[https://github.com/NixOS/nix-mode][nix-mode]]

   #+BEGIN_SRC emacs-lisp
	 (use-package nix-mode
	   :ensure t
	   :mode "\\.nix\\'")
   #+END_SRC

** [[https://orgmode.org/][org]]

   #+BEGIN_SRC emacs-lisp
	 (use-package org
	   :general
	   (general-override-mode-map :prefix "M-o" ; shadows delete-blank-lines
								  "C-l"   #'org-store-link
								  "C-S-l" #'org-insert-link
								  "C-a"   #'org-agenda
								  "C-c"   #'org-capture
								  "C-b"   #'org-switchb)
	   ; These shadow evil-paste-pop-next and evil-paste-pop
	   ('normal org-mode-map
				"C-n" #'org-next-link
				"C-p" #'org-previous-link)
	   ; These keys play nicer with god-mode
	   (org-mode-map     "C-c C-'" #'org-edit-special)
	   (org-src-mode-map "C-c C-'" #'org-edit-src-exit)
	   :config
	   (add-hook 'org-mode-hook 'auto-fill-mode)
			 ; jump to beginning/end of headerlines and items rather than lines
	   (setq org-special-ctrl-a/e t
			 ; improve editing folded text
			 org-catch-invisible-edits 'smart
			 ; use outline path completion for C-c C-j
			 org-goto-interface 'outline-path-completion
			 ; don't split the line on M-RET
			 org-M-RET-may-split-line '((default . nil))
			 ; Add WAIT keyword, configure fast access keys
			 org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)"))
			 ; Faces for TODO keywords
			 org-todo-keyword-faces '(("TODO" . org-todo)
									  ("WAIT" . "yellow")
									  ("DONE" . org-done))))
   #+END_SRC

*** TODO Don't move cursor to beginning of line when promoting or demoting in org mode
	Affects TAB on empty headline as well as explicitly using org-do-promote
*** TODO Show org link at point in modeline
*** TODO [[info:org#Feedback][Report]] bug in [[info:org#Motion][info:org#Motion]]
	should be org-forward-heading-same-level, not org-forward-same-level
*** TODO search only currently visible text?
*** [[http://doc.norang.ca/org-mode.html]]
** [[https://github.com/sabof/org-bullets][org-bullets]]

   #+BEGIN_SRC emacs-lisp
	 (use-package org-bullets
	   :after org
	   :ensure t
	   :init
	   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]

   #+BEGIN_SRC emacs-lisp
	 (use-package rainbow-delimiters
	   :ensure t
	   :init
	   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC

** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]

   #+BEGIN_SRC emacs-lisp
	 (use-package restart-emacs
	   :ensure t)
   #+END_SRC

*** TODO Get restart-emacs-restore-frames to work
** [[https://github.com/Fuco1/smartparens][smartparens]]

   #+BEGIN_SRC emacs-lisp
	 (use-package smartparens
	   :ensure t
	   :init
	   (add-hook 'prog-mode-hook #'smartparens-mode)
	   :config
	   (require 'smartparens-config))
   #+END_SRC

** [[https://melpa.org/#/sudo-edit][sudo-edit]]

   Activate with `M-x sudo-edit`

 #+BEGIN_SRC emacs-lisp
   (use-package sudo-edit
	 :ensure t)
 #+END_SRC

** [[https://github.com/akermu/emacs-libvterm][vterm]]

   #+BEGIN_SRC emacs-lisp
	 (use-package vterm
	   :ensure t
	   :config
	   (setq vterm-max-scrollback 10000))
   #+END_SRC

** [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]

   #+BEGIN_SRC emacs-lisp
	 (use-package vterm-toggle
	   :after vterm
	   :ensure t
	   :general
	   ; Specify normal state to shadow pop-tag-mark
	   ('(normal insert) general-override-mode-map :prefix "C-t" ; shadows pop-tag-mark
								  "C-t" #'vterm-toggle
								  "C-n" #'vterm
								  "C-f" #'vterm-toggle-forward
								  "C-b" #'vterm-toggle-backward)
	   ('insert vterm-mode-map "<C-return>" #'vterm-toggle-insert-cd))
   #+END_SRC

** [[https://github.com/kawabata/wolfram-mode][wolfram-mode]]

 #+BEGIN_SRC emacs-lisp
   (use-package wolfram-mode
	 :ensure t
	 :config
	 (setq wolfram-program "/opt/Mathematica/12.1.1/Executables/MathKernel"
		   wolfram-path "~/.Mathematica/Applications"
		   wolfram-indent 4
		   wolfram-mode-map (make-sparse-keymap))
	 (add-to-list 'auto-mode-alist '("\.m$" . wolfram-mode))
	 (add-to-list 'auto-mode-alist '("\.mt$" . wolfram-mode))
	 (add-to-list 'auto-mode-alist '("\.wl$" . wolfram-mode)))
 #+END_SRC

** xref

   #+BEGIN_SRC emacs-lisp
	 (use-package xref
	   :general
	   ('normal xref--xref-buffer-mode-map
				"j" #'xref-next-line
				"k" #'xref-prev-line))
   #+END_SRC
