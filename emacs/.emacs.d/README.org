#+TITLE: Emacs configuration
#+Author: Ian Ford

* Package management
** [[https://melpa.org/][MELPA]]

 #+BEGIN_SRC emacs-lisp
   (require 'package)
   (add-to-list 'package-archives
				'("melpa-stable" . "https://stable.melpa.org/packages/")
				t)
   (package-initialize)
   (setq package-selected-packages
		 '(color-theme-sanityinc-tomorrow
		   evil
		   evil-collection
		   evil-org
		   helpful
		   magit
		   sudo-edit
		   use-package
		   org-bullets))
 #+END_SRC

** [[https://github.com/jwiegley/use-package][use-package]]

 #+BEGIN_SRC emacs-lisp
   (eval-when-compile
	 (require 'use-package))
 #+END_SRC

* Basic settings
** Disable startup screen

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
 #+END_SRC

** Disable backups and auto-save files

 #+BEGIN_SRC emacs-lisp
   (setq backup-inhibited t)
   (setq auto-save-default nil)
 #+END_SRC

** Default frame settings

 #+BEGIN_SRC emacs-lisp
   (setq default-frame-alist '((menu-bar-lines . 0)
							   (tool-bar-lines . 0)
							   (vertical-scroll-bars . nil)
							   (horizontal-scroll-bars . nil)
							   (alpha . (85 . 50))
							   (font . "Hack 8")))
 #+END_SRC

** Immediately echo keystrokes

 #+BEGIN_SRC emacs-lisp
   (setq echo-keystrokes .1)
 #+END_SRC

** Text

 #+BEGIN_SRC emacs-lisp
   (setq-default tab-width 4
				 word-wrap t)
 #+END_SRC

** prog-mode

   #+BEGIN_SRC emacs-lisp
	 (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers t
												show-trailing-whitespace t)))
   #+END_SRC

* Features
** Color theme
*** [[https://github.com/purcell/color-theme-sanityinc-tomorrow][Sanity, Inc. "Tomorrow"]]

  #+BEGIN_SRC emacs-lisp
	(use-package color-theme-sanityinc-tomorrow
	  :ensure t
	  :config
	  (load-theme 'sanityinc-tomorrow-bright t))
  #+END_SRC

** [[https://github.com/kawabata/wolfram-mode][wolfram-mode]]

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/.emacs.d/wolfram-mode/")
   (autoload 'wolfram-mode "wolfram-mode" nil t)
   (autoload 'run-wolfram "wolfram-mode" nil t)
   (setq wolfram-program "/opt/Mathematica/12.1/Executables/MathKernel")
   (add-to-list 'auto-mode-alist '("\.m$" . wolfram-mode))
   (add-to-list 'auto-mode-alist '("\.wl$" . wolfram-mode))
   (setq wolfram-path "~/.Mathematica/Applications")
 #+END_SRC

** [[https://orgmode.org/][Org]]
*** Line break automatically

	#+BEGIN_SRC emacs-lisp
	  (add-hook 'org-mode-hook 'auto-fill-mode)
	#+END_SRC

*** Jump to beginning/end of headerlines and items rather than lines

	#+BEGIN_SRC emacs-lisp
	  (setq org-special-ctrl-a/e t)
	#+END_SRC

*** Stay in visual state after promotion

	#+BEGIN_SRC emacs-lisp
	  (setq evil-org-retain-visual-state-on-shift t)
	#+END_SRC

*** Show [[https://github.com/sabof/org-bullets][org-mode bullets]] as UTF-8 characters

	#+BEGIN_SRC emacs-lisp
	  (use-package org-bullets
		:ensure t
		:config
		(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
	#+END_SRC

** [[https://melpa.org/#/sudo-edit][sudo-edit]]

   Activate with `M-x sudo-edit`

 #+BEGIN_SRC emacs-lisp
   (use-package sudo-edit
	 :ensure t)
 #+END_SRC

** Dired

 #+BEGIN_SRC emacs-lisp
   (setq dired-listing-switches "-al --group-directories-first"
		 dired-isearch-filenames 'dwim
		 delete-by-moving-to-trash 't
		 dired-recursive-copies 't)
 #+END_SRC

** [[https://github.com/djcb/mu][mu4e]]

   #+BEGIN_SRC emacs-lisp
	 (use-package mu4e
	   :config
	   (setq mail-user-agent 'mu4e-user-agent
			 mu4e-update-interval 30
			 mu4e-compose-dont-reply-to-self t
			 mu4e-use-fancy-chars t
			 mu4e-headers-date-format "%e %b"
			 mu4e-split-view nil
			 mu4e-view-show-addresses t
			 mu4e-headers-fields '((:date . 7)
							  (:from . 22)
							  (:thread-subject))))
   #+END_SRC

   Load settings from ~/.emacs.d/mail.el:

   #+BEGIN_SRC emacs-lisp
	 (let ((mail-file "~/.emacs.d/mail.el"))
	   (if (file-readable-p mail-file)
		   (load-file mail-file)))
   #+END_SRC

   Example:

   #+BEGIN_SRC emacs-lisp :tangle no
	 ;; Identity
	 (setq user-full-name "Full Name"
		   user-mail-address "user@example.org")

	 ;; Folder settings
	 (setq mu4e-maildir "~/Maildir"
		   mu4e-drafts-folder "/drafts"
		   mu4e-sent-folder "/sent"
		   mu4e-trash-folder "/trash"
		   mu4e-refile-folder "/archive")

	 ;; Send mail
	 (setq message-send-mail-function 'smtpmail-send-it
		   smtpmail-smtp-server "smtp.example.org"
		   smtpmail-smtp-service 465
		   smtpmail-stream-type 'ssl)
   #+END_SRC

* Keybindings
** [[https://github.com/emacs-evil/evil][evil]]

 #+BEGIN_SRC emacs-lisp
   (use-package evil
	 :ensure t
	 :init
	 (setq evil-want-integration t
		   evil-want-keybinding nil
		   evil-want-C-u-scroll t)
	 :config
	 (evil-mode 1))
 #+END_SRC

** [[https://github.com/emacs-evil/evil-collection][evil-collection]]

   #+BEGIN_SRC emacs-lisp
	 (use-package evil-collection
	   :after evil
	   :ensure t
	   :config
	   (evil-collection-init))
   #+END_SRC

** [[https://github.com/Somelauw/evil-org-mode][org-evil]]

   #+BEGIN_SRC emacs-lisp
	 (use-package evil-org
	   :after org
	   :ensure t
	   :config
	   (add-hook 'org-mode-hook 'evil-org-mode)
	   (add-hook 'evil-org-mode-hook
				 (lambda ()
				   (evil-org-set-key-theme)))
	   (require 'evil-org-agenda)
	   (evil-org-agenda-set-keys))
   #+END_SRC

** [[https://magit.vc/manual/][magit]]

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
 #+END_SRC

** [[https://github.com/Wilfred/helpful][helpful]]

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-h f") #'helpful-callable)
   (global-set-key (kbd "C-h v") #'helpful-variable)
   (global-set-key (kbd "C-h k") #'helpful-key)
 #+END_SRC
