set nocompatible

" Download vim-plug if not present
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin()
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-repeat'
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-unimpaired'
	Plug 'tpope/vim-sensible'
	Plug 'tpope/vim-eunuch'
	Plug 'justinmk/vim-sneak'
	Plug 'ntpeters/vim-better-whitespace'
	Plug 'vim-airline/vim-airline'
	Plug 'rsmenon/vim-mathematica', { 'for': 'mma' }
	Plug 'junegunn/fzf'
	Plug 'junegunn/fzf.vim'
	Plug 'kana/vim-textobj-user'
	Plug 'kana/vim-textobj-indent'
	Plug 'kana/vim-textobj-entire'
	Plug 'kana/vim-textobj-line'
	Plug 'glts/vim-textobj-comment'
	Plug 'vim-syntastic/syntastic'
call plug#end()

" Change viminfo location
	set viminfo+=n~/.vim/viminfo

" Set background to dark
	set background=dark

" Enable line wrapping
	set wrap

" Populate airline fonts
	let g:airline_powerline_fonts = 1

" display line number of current line and relative line numbers
	set number relativenumber

" Indentation
	set autoindent smartindent

" Set tab and shift width to 4
	set tabstop=4
	set softtabstop=4
	set shiftwidth=4

" Ignore case in lowercase searches
	set ignorecase
	set smartcase

" Split to the bottom and the right
	set splitbelow splitright

" Disable automatic comments on newlines
	autocmd FileType * set formatoptions-=c formatoptions-=r formatoptions-=o

" Update diff when a buffer is written
	autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" Always display status line
	set laststatus=2

" Ensure files are read with the correct filetypes
	autocmd BufRead,BufNewFile *.wl set filetype=mma
	autocmd BufRead,BufNewFile *.m set filetype=mma
	autocmd BufRead,BufNewFile *.rdf set filetype=xml
	autocmd BufRead,BufNewFile ~/.mutt/* set filetype=muttrc

" Mathematica settings
	autocmd FileType mma setlocal commentstring=\(*%s*\)
	autocmd FileType mma inoremap <buffer> $$ \[Formal]<Esc>i
	autocmd FileType mma inoremap <buffer> $$$ \[FormalCapital]<Esc>i
	let g:mma_candy = 1

" Set text width to 80 in emails
	autocmd FileType mail set textwidth=80

" vim_better_whitespace settings
	let g:strip_whitelines_at_eof=1
	let g:show_spaces_that_precede_tabs=1

" Change <Leader> to <Space>
	let mapleader = " "
	nnoremap <Space> <Nop>

" System clipboard mappings
	nnoremap	<Leader>y	"+y
	nnoremap	<Leader>p	"+p
	nnoremap	<Leader>Y	"*y
	nnoremap	<Leader>P	"*p

" Replace all mapping
	nnoremap	<Leader>r	:%s//g<Left><Left>

" fzf mappings
	nnoremap	<Leader>f	:Files<Enter>
	nnoremap	<Leader>l	:Lines<Enter>
	nnoremap	<leader>b	:Buffers<Enter>

" Use blinking pipe cursor in insert mode and blinking block otherwise
	autocmd VimEnter	* silent execute "! echo -ne '\e[1 q'"
	autocmd InsertLeave	* silent execute "! echo -ne '\e[1 q'"
	autocmd WinEnter	* silent execute "! echo -ne '\e[1 q'"
	autocmd VimLeave	* silent execute "! echo -ne '\e[5 q'"
	autocmd InsertEnter	* silent execute "! echo -ne '\e[5 q'"

" Syntastic settings
	let g:syntastic_mode_map = {"mode": "passive"}
	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_check_on_wq = 0
	let g:syntastic_quiet_messages = { "regex":	".*HTML5.*"	}
	nnoremap	<Leader>s	:SyntasticCheck<Enter>
	nnoremap	<Leader>S	:SyntasticToggleMode<Enter>
