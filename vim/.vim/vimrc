" Enable syntax and filetype plugins
	syntax on
	filetype plugin indent on

" Backspace
	set backspace=indent,eol,start

" Timeout
	set ttimeout
	set ttimeoutlen=100

" Incremental search
	set incsearch

" Enhanced command mode tab completion
	set wildmenu

" Scrolloff
	set scrolloff=1
	set sidescrolloff=5

" Comments
	set formatoptions+=j formatoptions-=cro

" Automatically reead files changed outside of Vim
	set autoread

" Extended matching with %
	packadd matchit

" Change viminfo location
	set viminfo+=n~/.vim/viminfo

" Use colors that look good on a dark background
	set background=dark

" Enable line wrapping
	set wrap

" Populate airline fonts
	let g:airline_powerline_fonts = 1

" display line number of current line and relative line numbers
	set number relativenumber

" Indentation
	set autoindent smartindent

" Set tab and shift width to 4
	set tabstop=4
	set softtabstop=4
	set shiftwidth=4

" Ignore case in lowercase searches
	set ignorecase
	set smartcase

" Split to the bottom and the right
	set splitbelow splitright

" Update diff when a buffer is written
	autocmd BufWritePost * if &diff == 1 | diffupdate | endif

" Always display status line
	set laststatus=2

" Ensure files are read with the correct filetypes
	autocmd BufRead,BufNewFile *.wl set filetype=mma
	autocmd BufRead,BufNewFile *.m set filetype=mma
	autocmd BufRead,BufNewFile *.rdf set filetype=xml
	autocmd BufRead,BufNewFile ~/.mutt/* set filetype=muttrc

" Mathematica settings
	autocmd FileType mma setlocal commentstring=\(*%s*\)
	autocmd FileType mma inoremap <buffer> $$ \[Formal]<Esc>i
	autocmd FileType mma inoremap <buffer> $$$ \[FormalCapital]<Esc>i
	let g:mma_candy = 1

" Set text width to 80 in emails
	autocmd FileType mail set textwidth=80

" vim_better_whitespace settings
	let g:strip_whitelines_at_eof=1
	let g:show_spaces_that_precede_tabs=1

" Change <Leader> to <Space>
	let mapleader = " "
	nnoremap <Space> <Nop>

" System clipboard mappings
	nnoremap	<Leader>y	"+y
	nnoremap	<Leader>p	"+p
	nnoremap	<Leader>Y	"*y
	nnoremap	<Leader>P	"*p

" Replace all mapping
	nnoremap	<Leader>r	:%s//g<Left><Left>

" fzf mappings
	nnoremap	<Leader>f	:Files<Enter>
	nnoremap	<Leader>l	:Lines<Enter>
	nnoremap	<leader>b	:Buffers<Enter>
	nnoremap	<leader>h	:Helptags<Enter>

" Use blinking pipe cursor in insert mode and blinking block otherwise
	let &t_SI = "\e[5 q"
	let &t_EI = "\e[1 q"
	augroup cursor
		au!
		autocmd VimEnter * silent !echo -ne "\e[1 q"
		autocmd VimEnter * redraw!
	augroup end
